#!/usr/bin/env node

var nopt   = require('nopt'),
    fs     = require('fs'),
    path   = require('path'),
    tty    = require('tty'),
    Vault  = require('../lib/vault'),
    CONFIG = process.env.HOME + '/.vault',
    
    options = { config:   Boolean,
                phrase:   String,
                length:   Number
              },
    
    shorts  = { 'c': '--config',
                'p': '--phrase',
                'l': '--length'
              },
    
    params  = nopt(options, shorts);

var editConfig = function(transform) {
  fs.readFile(CONFIG, function(error, data) {
    var config = error ? {} : JSON.parse(data.toString());
    transform(config);
    fs.writeFile(CONFIG, JSON.stringify(config, true, 2), function(error) {
      if (error) console.error('Error writing file: ' + CONFIG);
      process.exit(error ? 1 : 0);
    });
  });
};

var readConfig = function() {
  try {
    var data = fs.readFileSync(CONFIG);
    return JSON.parse(data.toString());
  } catch (e) {
    return {};
  }
};

if (params.config) {
  editConfig(function(settings) {
    if (typeof params.phrase === 'string')
      settings.phrase = params.phrase;
  });

} else {
  var phrase  = params.phrase || readConfig().phrase,
      service = params.argv.remain[0],
      length  = params.length;
  
  if (phrase === undefined) {
    console.error('Passphrase is not defined; pass `-p PHRASE` or run `vault -cp PHRASE`');
    process.exit(1);
  }

  if (service === undefined) {
    console.error('Service is undefined');
    process.exit(1);
  }

  var vault    = new Vault({phrase: phrase, length: length}),
      password = vault.generate(service);
  
  process.stdout.write(password);
  if (tty.isatty(1)) process.stdout.write('\n');
  process.exit(0);
}

