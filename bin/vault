#!/usr/bin/env node

var CLI  = require('../node/cli'),
    SSH  = require('ssh-agent'),
    pw   = require('pw'),
    rl   = require('readline'),
    tty  = require('tty'),
    
    path = process.env.VAULT_PATH || '.vault',
    
    key  = process.env.VAULT_KEY ||
           process.env.LOGNAME ||
           process.env.USER ||
           process.env.USERNAME;

if (!/^\//.test(path)) {
  path = (process.env.HOME || process.env.USERPROFILE) + '/' + path;
}

var version = process.versions.node.match(/(\d+)\.(\d+)\.(\d+)/), rl;

var readline  = (parseInt(version[2], 10) <= 6)
              ? function() {
                  return rl.createInterface(process.stdin, process.stderr);
                }
              : function() {
                  return rl.createInterface({input:  process.stdin, output: process.stderr});
                };

if (process.stdin.setRawMode)
  tty.setRawMode = function(state) {
    return process.stdin.setRawMode(state);
  };

var cli = new CLI({
  config: {path: path, key: key},
  output: process.stdout,
  tty:    tty.isatty(1),
  
  password: function(callback) {
    process.stderr.write('Passphrase: ');
    pw('*', process.stdin, process.stderr, callback);
  },
  
  sshSign: function(string, callback) {
    var client = new SSH(),
        data   = new Buffer(string),
        snip   = 12;
    
    var sign = function(key) {
      client.sign(key, data, function(error, signature) {
        if (signature)
          callback(null, signature.signature);
        else
          callback(new Error('Private key signing failed'));
      });
    };
    
    client.requestIdentities(function(error, keys) {
      keys = keys.filter(function(k) { return k.type === 'ssh-rsa' });
      
      if (keys.length === 0)
        return callback(new Error('No usable RSA keys were found'));
      
      if (keys.length === 1) return sign(keys[0]);
      
      console.error('\nWhich key would you like to use?\n');
      
      keys.forEach(function(key, i) {
        var abbrev = key.ssh_key.substr(0, snip) + '...' + key.ssh_key.substr(key.ssh_key.length - snip);
        console.error((i+1) + ': ' + key.comment + ', ' + abbrev);
      });
      readline().question('\nEnter a number (1-' + keys.length + '): ', function(index) {
        index = parseInt(index, 10);
        if (index >= 1 && index <= keys.length)
          sign(keys[index - 1]);
        else
          callback(new Error('Selected key must be between 1 and ' + keys.length));
      });
    });
  }
});

cli.run(process.argv, function(error) {
  if (error) {
    console.error(error.message);
    process.exit(1);
  } else {
    process.exit(0);
  }
});

